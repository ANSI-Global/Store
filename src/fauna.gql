type Warehouse @collection(name: "warehouses") {
  name: String!
  address: Address!
}

type Category @collection(name: "categories") {
  label: String!
}

type Product @collection(name: "products") {
  name: String!
  description: String!
  categoryID: String
  images: [String]
  price: Float!
  warehouse: Warehouse
  quantity: Int
  backorderLimit: Int
  backordered: Boolean
}

type User @collection(name: "users") {
  uid: ID!
  address: Address
  role: String
  searchedItems: [String]
  clickedItems: [String]
  usedTags: [Strings]
}

type Customer @collection(name: "customers") {
  user: User!
  products: [Product]
  deliveryMethod: String
  paymentMethod: String
  orderStatus: String
}

type Order @collection(name: "orders") {
  customer: Customer!
  line: [ProductLine!]!
  status: String!
  creationDate: Time!
  shipDate: Time
  shipAddress: Address!
  dateCreated: String
  details: String
}

type Address @embedded {
  street: String!
  city: String!
  state: String!
  zipCode: String!
}

type CustomerGroups {
  dateCreated: String
  name: String
  description: String
  id: ID!
}

type ProductLine @embedded {
  product: Product!
  quantity: Int!
}

input SubmitOrderProductInput {
  productId: ID!
  quantity: Int!
}

type Query {
  allWarehouses: [Warehouse!]! @index(name: "all_warehouses")
  allCategories: [Category!]! @index(name: "all_categories")
  allProducts: [Product!]! @index(name: "all_products")
  allUsers: [User!]! @index(name: "all_users")
  allCustomers: [Customer!]! @index(name: "all_customers")
  allOrders: [Order!]! @index(name: "all_orders")
}

type Mutation {
  submitOrder(customerId: ID!, products: [SubmitOrderProductInput]): Order!
  @resolver(name: "submit_order")
}
